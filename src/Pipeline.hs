module Pipeline where

import Data.Maybe (isJust)
import Instr

-- 4 stage pipeline, allowing for 4 instructions (at different stages) to be
-- processed at the same time: fetching, decoding, executing, and write-back.
data Pipeline = Pipeline {
    fetched  :: Maybe Instr
  , decoded  :: Maybe Instr
  , executed :: Maybe WriteBackInstr
}

-- Return pipeline with nothing in each stage.
empty :: Pipeline
empty = Pipeline Nothing Nothing Nothing

-- Generated by execution step of pipeline.
-- Instruction to machine of values to update.
data WriteBackInstr
    = WriteReg RegIdx Val
    | WriteMem Addr Val
    | WritePrint String
    | NoOp

type Decoder  m = Instr -> m Instr
type Executer m = Instr -> m WriteBackInstr
type Writer m a = WriteBackInstr -> m a

-- Supplies new instruction into pipleine, and shifts in-flight instructions
-- through pipeline. Returns write-back result, and new state of pipeline.
advance :: (Monad m) => Maybe Instr -> Decoder m -> Executer m -> Writer m a -> Pipeline -> m (Maybe a, Pipeline)
advance fetch decode exec write p = do
    d <- maybe (return Nothing) (fmap Just . decode) (fetched p)
    e <- maybe (return Nothing) (fmap Just . exec)   (decoded p)
    w <- maybe (return Nothing) (fmap Just . write)  (executed p)
    return (w, Pipeline fetch d e)
