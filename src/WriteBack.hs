module WriteBack where

import Types

type Valid = Bool

data LoadData = LoadData Addr Valid
              deriving (Show, Eq)

invalidateLoadData :: Addr -> LoadData -> LoadData
invalidateLoadData chkAddr (LoadData addr _) = LoadData addr (chkAddr /= addr)

-- Generated by execution step of pipeline.
-- FInstruction to machine of values to update.
data WriteBack
    -- Valid used to determine whether to flush the pipeline if a load is
    -- determined to be invalid.
    = WriteReg PhyReg Val (Maybe LoadData)
    | WriteMem Addr Val
    | WritePrint String
    | NoOp
    | Terminate
    deriving (Show, Eq)

-- Invalidates a load instruction if it has a matching address.
invalidateLoad :: Addr -> WriteBack -> WriteBack
invalidateLoad addr (WriteReg r v ld) = WriteReg r v ld' where
    ld' = fmap (invalidateLoadData addr) ld
invalidateLoad _ wb = wb
